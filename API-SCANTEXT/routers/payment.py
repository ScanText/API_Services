from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.orm import Session
from typing import List
from datetime import datetime, timedelta
from db.database import get_db
from models.payment_models import Payment
from models.user_models import User
from models.subscription_models import Subscription, UserSubscription
from schemas.payment_schemas import PaymentCreate, PaymentOut
from fastapi.responses import HTMLResponse
from schemas.subscription_schemas import UpdateSubscriptionRequest
from schemas.payment_schemas import PaymentSuccessRequest
from schemas.payment_schemas import CreatePaymentRequest, PaymentOut, ConfirmPaymentRequest
import requests

import uuid

router = APIRouter()

@router.post("/pay", response_model=PaymentOut)
def make_payment(data: PaymentCreate, db: Session = Depends(get_db)):
    user = db.query(User).filter_by(id=data.user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    subscription = db.query(Subscription).filter_by(id=data.subscription_id).first()
    if not subscription:
        raise HTTPException(status_code=404, detail="Subscription not found")

    payment = Payment(
        user_id=user.id,
        subscription_id=subscription.id,
        amount=data.amount,
        method=data.method,
        transaction_id=data.transaction_id,
        status="pending",
        currency="UAH",
        timestamp=datetime.utcnow()
    )
    db.add(payment)
    db.commit()
    db.refresh(payment)

    print(f"[PAYMENT CREATED] User ID: {user.id}, Subscription ID: {subscription.id}, Amount: {data.amount} UAH, Status: pending, Transaction ID: {data.transaction_id}")

    return payment

@router.get("/payment-success", response_class=HTMLResponse)
async def payment_success_page(orderId: str):
    print(f"üîó –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞ —Å orderId={orderId}")

    return HTMLResponse(content=f"""
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!</title>
        <style>
            body {{
                background-color: #f0f4f8;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                height: 100vh;
                font-family: Arial, sans-serif;
            }}
            h1 {{
                color: #22c55e;
                font-size: 48px;
                margin-bottom: 20px;
            }}
            p {{
                font-size: 20px;
                color: #4b5563;
            }}
        </style>
    </head>
    <body>
        <h1>‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!</h1>
        <p>–í–∞—à –∑–∞–∫–∞–∑ {orderId} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</p>
    </body>
    </html>
    """, status_code=200)

@router.get("/payments/by-user", response_model=List[PaymentOut])
def get_payments_by_user(user_id: int, db: Session = Depends(get_db)):
    print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è user_id={user_id}")
    payments = db.query(Payment).filter_by(user_id=user_id).all()
    print(f"üîé –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}")
    return payments


def activate_subscription_from_payment(user_id: int, payment_id: int, db: Session):
    payment = db.query(Payment).filter_by(id=payment_id).first()
    if not payment:
        print(f"–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: payment_id={payment_id}")
        return

    sub = db.query(Subscription).filter_by(id=payment.subscription_id).first()
    if not sub:
        print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: subscription_id={payment.subscription_id}")
        return

    print(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: user_id={user_id}, subscription={sub.name}, scans={sub.scan_limit}")

    db.query(UserSubscription).filter_by(user_id=user_id, is_active=True).update({"is_active": False})

    new_sub = UserSubscription(
        user_id=user_id,
        subscription_id=sub.id,
        start_date=datetime.utcnow(),
        end_date=datetime.utcnow() + timedelta(days=sub.duration_days),
        remaining_scans=sub.scan_limit,
        is_active=True,
        payment_id=payment.id
    )
    db.add(new_sub)
    db.commit()


@router.post("/success")
async def payment_success_api(data: PaymentSuccessRequest, db: Session = Depends(get_db)):
    print(f"–ü–æ–ª—É—á–µ–Ω POST –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: orderId = {data.orderId}")

    payment = db.query(Payment).filter_by(transaction_id=data.orderId).first()

    if not payment:
        raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if payment.status == 'success':
        print(f"–ü–ª–∞—Ç—ë–∂ —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º —Ä–∞–Ω–µ–µ: orderId={data.orderId}")
        return {"message": "–ü–ª–∞—Ç—ë–∂ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Ä–∞–Ω–µ–µ"}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç—ë–∂
    print(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ success –¥–ª—è orderId={data.orderId}")
    payment.status = 'success'

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    activate_subscription_from_payment(user_id=payment.user_id, payment_id=payment.id, db=db)

    db.commit()

    return {"message": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}

@router.post("/mono-callback")
async def mono_callback(request: Request):
    data = await request.json()
    print("üì© –ü—Ä–∏—à—ë–ª callback –æ—Ç Monobank:")
    print(data)  # –ü—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º –≤–µ—Å—å –ø—Ä–∏—à–µ–¥—à–∏–π JSON

    return {"message": "‚úÖ Callback –ø–æ–ª—É—á–µ–Ω"}


@router.post("/create-payment")
def create_payment(data: CreatePaymentRequest, db: Session = Depends(get_db)):
    print(f"üì© –ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {data.dict()}")
    
    reference = f"order-{uuid.uuid4()}"
    print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω reference: {reference}")

    response = requests.post(
        "https://api.monobank.ua/api/merchant/invoice/create",
        headers={"X-Token": 'uTxwJZS40IeHwlzBmz2FkAh-i5UvDx9Lcpe2hQlfTssI'},
        json={
            "amount": data.amount,
            "ccy": 980,
            "redirectUrl": "http://localhost:3000/payment-success",
            "callbackUrl": "https://your-ngrok-url.ngrok-free.app/payment/mono-callback",
            "merchantPaymInfo": {
                "reference": reference,
                "destination": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {data.subscription_id}"
            }
        }
    )

    print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç Monobank: {response.status_code}")
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Monobank: {response.text}")
        raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ –≤ Monobank")

    invoice_data = response.json()

    # –ü–∏—à–µ–º –≤ –ë–î
    print(f"üíæ –ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î...")
    payment = Payment(
        user_id=data.user_id,
        subscription_id=data.subscription_id,
        amount=data.amount,
        method='monobank',
        transaction_id=reference,
        status='pending'
    )
    db.add(payment)
    db.commit()
    db.refresh(payment)

    print(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –∑–∞–ø–∏—Å–∞–Ω. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.user_id}, –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {reference}")

    return {"invoice_url": invoice_data["pageUrl"]}



@router.post("/confirm-latest-payment")
def confirm_latest_payment(data: ConfirmPaymentRequest, db: Session = Depends(get_db)):
    payment = (
        db.query(Payment)
        .filter_by(user_id=data.user_id, status='pending')
        .order_by(Payment.timestamp.desc())
        .first()
    )

    if not payment:
        raise HTTPException(status_code=404, detail="–ù–µ –Ω–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂")

    payment.status = 'success'
    db.commit()

    # –ó–¥–µ—Å—å –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    activate_subscription_from_payment(user_id=data.user_id, payment_id=payment.id, db=db)

    return {"message": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}


@router.get("/payments/all", response_model=List[PaymentOut])
def get_all_payments(db: Session = Depends(get_db)):
    payments = db.query(Payment).all()
    print(f"üîé –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –±–∞–∑–µ: {len(payments)}")
    return payments

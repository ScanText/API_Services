from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import func
from sqlalchemy.orm import joinedload

from db.database import SessionLocal
from crud import admin_crud
from schemas import admin_schemas
from models import admin_models
from utils.security import verify_password  # üîë –∏–º–ø–æ—Ä—Ç —Ö–µ—à-–ø—Ä–æ–≤–µ—Ä–∫–∏

router = APIRouter()

# üì¶ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.post("/create", response_model=admin_schemas.AdminUserOut)
def create_admin(admin: admin_schemas.AdminUserCreate, db: Session = Depends(get_db)):
    return admin_crud.create_admin_user(db, admin)

# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#@router.post("/login", response_model=admin_schemas.AdminUserOut)
#def login_admin(credentials: admin_schemas.AdminLogin, db: Session = Depends(get_db)):
#    admin = admin_crud.get_admin_user_by_username(db, credentials.username)
#    if not admin or not verify_password(credentials.password, admin.password_hash):
#        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
#    return admin


@router.post("/login", response_model=admin_schemas.AdminUserOut)
def login_admin(credentials: admin_schemas.AdminLogin, db: Session = Depends(get_db)):
    print(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {credentials.username}")  # –õ–û–ì

    admin = admin_crud.get_admin_user_by_username(db, credentials.username)
    if not admin:
        print("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")  # –õ–û–ì
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    if not verify_password(credentials.password, admin.password_hash):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")  # –õ–û–ì
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {admin.username}")  # –õ–û–ì
    return admin


# üìã –í—Å–µ –∞–¥–º–∏–Ω—ã
@router.get("/all", response_model=list[admin_schemas.AdminUserOut])
def get_all_admins(db: Session = Depends(get_db)):
    return admin_crud.get_all_admins(db)

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
@router.get("/{admin_id}/stats")
def get_admin_stats(admin_id: int, db: Session = Depends(get_db)):
    count = db.query(func.count(admin_models.Upload.id)).filter(admin_models.Upload.admin_id == admin_id).scalar()
    return {"upload_count": count}

#
@router.post("/activate-subscription")
def activate_subscription(user_id: int, payment_id: int, db: Session = Depends(get_db)):
    activate_subscription_from_payment(user_id=user_id, payment_id=payment_id, db=db)
    return {"message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}
